# -*- coding: utf-8 -*-
"""embedding layer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KQR6AsY43ftEkdNPauXCF9C92ouWBrDg

## PRE PROCESSING
"""

from tensorflow.keras.preprocessing.text import one_hot

sent=[  'the glass of milk',
     'the glass of juice',
     'the cup of tea',
    'I am a good boy',
     'I am a good developer',
     'understand the meaning of words',
     'your videos are good',]

sent

voc_size = 10000

## ohe
one_hot_repr=[one_hot(words, voc_size)for words in sent]
one_hot_repr

## embedding
from tensorflow.keras.layers import Embedding
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential

import numpy as np

sent_length = 8
embedded_docs = pad_sequences(one_hot_repr, padding='pre', maxlen=sent_length)
print(embedded_docs)

## feature representation
dim=10

model=Sequential()
model.add(Embedding(voc_size,10,input_length=sent_length))
model.compile('adam','mse')
model.summary()

model.predict(embedded_docs)

embedded_docs[0]

model.predict(embedded_docs)[0]

"""### IMDB TEXT CLASSIFICATION END-TO-END PROJECT"""

import tensorflow as tf
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing import sequence
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, SimpleRNN, Dense

# dataset
max_features = 10000
(x_train, y_train), (x_test, y_test) = imdb.load_data(num_words=max_features)

print(f'training data shape: {x_train.shape}, Training labels shape: {y_train.shape}')
print(f'testing data shape: {x_test.shape}, Testing labels shape: {y_test.shape}')

sample_review= x_train[0],
sample_label= y_train[0]
print(sample_review)
print(sample_label)

word_index=imdb.get_word_index()
word_index
reverse_word_index=dict([(value,key) for (key,value) in word_index.items()])
reverse_word_index

decoded_review = ' '.join([reverse_word_index.get(i - 3, '?') for i in sample_review[0]])
decoded_review

from re import X
from tensorflow.keras.preprocessing.sequence import pad_sequences
max_length = 500
x_train = sequence.pad_sequences(x_train, maxlen=max_length)
x_test = sequence.pad_sequences(x_test, maxlen=max_length)
x_train

"""### RNN MODEL

"""

model = Sequential()
model.add(Embedding(max_features, 128, input_length=max_length))
model.add(SimpleRNN(128,activation= 'relu'))
model.add(Dense(1, activation='sigmoid'))
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

## early stopping
from tensorflow.keras.callbacks import EarlyStopping
early_stopping=EarlyStopping(monitor='val_loss', patience=3, restore_best_weights=True)

model.fit(x_train, y_train, epochs=10, batch_size=32, validation_split=0.2, callbacks=[early_stopping])

"""### SENTIMENT ANALYSIS/ MODEL WORKING"""

model.save('simple_rnn_imdb.h5')

from tensorflow.keras.models import load_model

model = load_model('simple_rnn_imdb.h5')
model.summary()

def decode_review(encoded_review):
    return ' '.join([reverse_word_index.get(i - 3, '?') for i in encoded_review])


def preprocess_text(text):
    words = text.lower().split()
    encoded_review = [word_index.get(word, 2) + 3 for word in words]
    padded_review = sequence.pad_sequences([encoded_review], maxlen=500)
    return padded_review

def predict_sentiment(review):
    preprocessed_input=preprocess_text(review)

    prediction=model.predict(preprocessed_input)

    sentiment = 'Positive' if prediction[0][0] > 0.5 else 'Negative'

    return sentiment, prediction[0][0]

# Step 4: User Input and Prediction
# Example review for prediction
example_review = "This movie was fantastic! The acting was great and the plot was thrilling."

sentiment,score=predict_sentiment(example_review)

print(f'Review: {example_review}')
print(f'Sentiment: {sentiment}')
print(f'Prediction Score: {score}')

"""STREAMLIT APP"""

! pip install streamlit

import streamlit as st
st.title('IMDB movie review sentiment analysis')
st.write('enter a movie review to classify it as a positive or negative review')
user_input = st.text_area('movie review')
if st.button('classify'):
  preprocessed_input=preprocess_text(user_input)
  sentiment= 'positive' if model.predict(preprocessed_input)[0][0] > 0.5 else 'negative'
  st.write(f'sentiment: {sentiment}')
  st.write(f'prediction score: {model.predict(preprocessed_input)[0][0]}')
else:
    st.write('please enter a movie review')